#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}


# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c <"$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo "" # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
		openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" |
			openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
		echo "Common Name:"
		echo "" # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
		echo "" # newline
		echo "Subject Alternative Name(s):"
		echo "" # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
			sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

# 设置全局代理
# 参数：
#   $1 - 代理端口，默认为 7890
# 示例：
#   proxyon 7890
function proxyon() {
	local port=${1:-7890}
	export HTTPS_PROXY=http://127.0.0.1:$port
	export HTTP_PROXY=http://127.0.0.1:$port
	export ALL_PROXY=socks5://127.0.0.1:$port
}

# 取消全局代理设置
function proxyoff() {
	unset HTTPS_PROXY
	unset HTTP_PROXY
	unset ALL_PROXY
}

# create_split_bw_item 创建并分割 Bitwarden 项目。 当文件内容超过 5000 个字符时，会自动分割为多个项目。
# 最终生成的项目名称为：${name}_1, ${name}_2, ${name}_3, ...
# 参数：
#   $1 - Bitwarden 项目的名称
#   $2 - Bitwarden 项目的内容的文件路径
# 示例：
#   create_split_bw_item "id_rsa" ～/.ssh/id_rsa
function create_split_bw_item() {
	local name=$1
	local file_path=$2
	local content=$(cat $file_path)
	local length=${#content}
	local max_length=5000
	local part=1

	while [ $length -gt 0 ]; do
		local notes=${content:0:$max_length}
		echo "$notes"
		echo "{\"organizationId\":null,\"folderId\":null,\"type\":2,\"name\":\"${name}_$part\",\"notes\":\"$(echo $notes | sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\\\n/g')\",\"favorite\":false,\"fields\":[],\"login\":null,\"secureNote\":{\"type\":0},\"card\":null,\"identity\":null}" | bw encode | bw create item
		content=${content:$max_length}
		length=${#content}
		((part++))
	done
}

# create_bw_item 创建 Bitwarden 项目。
# 参数：
#   $1 - Bitwarden 项目的名称
#   $2 - Bitwarden 项目的内容的文件路径
# 示例：
#   create_bw_item "id_rsa" ～/.ssh/id_rsa
function create_bw_item() {
	local name=$1
	local file_path=$2
	echo "{\"organizationId\":null,\"folderId\":null,\"type\":2,\"name\":\"$name\",\"notes\":\"$(sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/\\\\n/g' $file_path)\",\"favorite\":false,\"fields\":[],\"login\":null,\"secureNote\":{\"type\":0},\"card\":null,\"identity\":null}" | bw encode | bw create item
}

# install_by_asdf 通过 asdf 安装特定版本的软件
# 参数：
#   $1 - 软件名称
#   $2 - 软件版本
#   $3 - 是否自动设置为全局软件版本 
# 示例：
#   install_by_asdf nodejs latest:18 true
#   install_by_asdf nodejs latest false
function install_by_asdf() {
	local name=$1
	local version=$2
	local global=$3

	asdf plugin-add $name
	asdf install $name $version
	if [ "$global" = true ]; then
		asdf global $name $version
	fi
}

# 通过 asdf 安装特定版本的 nodejs
# 参数：
#   $1 - nodejs 版本
#   $2 - 是否自动设置为全局 nodejs 版本 (true/false) 默认为 true
# 示例：
#   install_nodejs latest:18
#   install_nodejs latest
#   install_nodejs 14.17.0
function install_nodejs() {
	local version=$1
	local global=${2:-true}
	install_by_asdf nodejs $version $global
}

# 通过 asdf 安装特定版本的 erlang
# 参数：
#   $1 - erlang 版本
#   $2 - 是否自动设置为全局 erlang 版本 (true/false) 默认为 true
# 示例：
#   install_erlang latest:24
#   install_erlang latest
function install_erlang() {
	local version=$1
	local global=${2:-true}
	install_by_asdf erlang $version $global
}

# 通过 asdf 安装特定版本的 elixir
# 参数：
#   $1 - elixir 版本
#   $2 - 是否自动设置为全局 elixir 版本 (true/false) 默认为 true
# 示例：
#   install_elixir latest:1.12
#   install_elixir latest
function install_elixir() {
	local version=$1
	local global=${2:-true}
	install_by_asdf elixir $version $global
}
